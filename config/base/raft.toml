[raft]
# /// the metric used to convert a follower to learner,
# ///     if learner's next_id is far away from leader's commit_index
# /// be careful on the value, if it is too smal it might create a ‘competition’
# ///     situation is that leader will keep convert a node between learner and follower
# /// 
learner_raft_log_gap = 10
general_raft_timeout_duration_in_ms = 100


[raft.replication]
# [raft], leader append frequence
rpc_append_entries_clock_in_ms = 100
# Process commands when this number is reached
rpc_append_entries_in_batch_threshold = 100
# Ensure the batch is processed within a maximum delay (e.g., 10ms)
rpc_append_entries_batch_process_delay_in_ms = 1
# timeout in ms

# if a follower is very slow to catch up with leader, we should limit the max number of the entries could sync per time
append_entries_max_entries_per_replication = 100

[raft.election]
election_timeout_min = 500
election_timeout_max = 1000

# check rpc connection health per 30 sec
rpc_peer_connectinon_monitor_interval_in_sec = 30
internal_rpc_client_request_id = 0


[raft.commit_handler]
batch_size = 100
process_interval_ms = 10
max_entries_per_chunk = 100

[raft.snapshot]
max_log_entries_before_snapshot = 1000
cleanup_retain_count = 2

[raft.membership]
cluster_healthcheck_probe_service_name = "raft.cluster.ClusterManagementService"

[raft.auto_join]
rpc_enable_compression = true
