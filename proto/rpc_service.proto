syntax = "proto3";

package rpc_service;

message VoteRequest {
  uint64 term = 1;
  uint32 candidateId = 2;
  uint64 lastLogIndex = 3;
  uint64 lastLogTerm= 4;
}

message VoteResponse {
  // currentTerm, for candidate to update itself
  uint64 term = 1;
  // true means candidate received vote
  bool voteGranted = 2;
  // Used to determine whether the rejection is due to the log being outdated or having already voted for another node.
  uint64 lastLogIndex = 3;
  uint64 lastLogTerm= 4;
}

// Unique identifier of the Raft log 
message LogId {
  uint64 term = 1;
  uint64 index = 2; 
}

message Entry {
  uint64 index = 1;
  uint64 term = 2;
  bytes command = 3;
}

message ActiveSnapshot {
  uint32 nodeId= 1;
  uint64 index = 2;
}

message AppendEntriesRequest {
  // leader term
  uint64 term = 1;
  // so follower can redirect clients
  uint32 leaderId = 2;
  // index of log entry immediately preceding new ones
  uint64 prevLogIndex = 3;
  // term of prevLogIndex entry
  uint64 prevLogTerm = 4;
  // log entries to store (empty for heartbeat; may send more than one for efficiency)
  repeated Entry entries = 5;
  // leader commitIndex
  uint64 leaderCommitIndex = 6;
}

message AppendEntriesResponse {
  uint32 nodeId = 1;

  // current term
  uint64 term = 2;

  oneof result {
    // Success response (success = true)
    SuccessResult success = 3;
    
    // Conflict response (success = false)
    ConflictResult conflict = 4;

    // Higher Term response (success = false)
    uint64 higher_term = 5; // Observed Higher Term
  }
}
// Success or partial success
message SuccessResult {
  LogId last_match = 1; // Confirmed highest matching log
}

// Log conflict information
message ConflictResult {
  optional uint64 conflict_term = 1; // Term of the conflicting entry (if any)
  optional uint64 conflict_index = 2; // The first index of the conflicting term (if any)
}
message ClientCommand {
  oneof command {
    bytes get = 1;            // Key for GET
    Insert insert = 2;        // Key+Value for INSERT
    bytes delete = 3;         // Key for DELETE
    bool no_op = 4;           // Simple flag for NO_OP
  }

  message Insert {
    bytes key = 1;
    bytes value = 2;
  }
}

message ClientProposeRequest {
  uint32 client_id = 1;
  repeated ClientCommand commands = 2;
}

message ClientReadRequest {
  uint32 client_id = 1;
  bool linear = 2;
  repeated ClientCommand commands = 3;
}

message ClientResult {  // Renamed from ClientGetResult
  bytes key = 1;
  bytes value = 2;
}

enum ErrorCode {
  // Success status (non-error)
  SUCCESS = 0;

  // ======================
  // Network layer error (1000-1999)
  // ======================
  CONNECTION_TIMEOUT = 1001; 
  INVALID_ADDRESS = 1002;
  LEADER_CHANGED = 1003; 
  JOIN_ERROR = 1004;

  // ======================
  // Protocol layer error (2000-2999)
  // ======================
  INVALID_RESPONSE = 2001;
  VERSION_MISMATCH = 2002;

  // ======================
  // Storage layer error (3000-3999)
  // ======================
  DISK_FULL = 3001; 
  DATA_CORRUPTION = 3002; 
  STORAGE_IO_ERROR = 3003;
  STORAGE_PERMISSION_DENIED = 3004;
  KEY_NOT_EXIST = 3005;

  // ======================
  // Business logic error (4000-4999)
  // ======================
  NOT_LEADER = 4001; 
  STALE_OPERATION = 4002; 
  INVALID_REQUEST = 4003; 
  RATE_LIMITED = 4004; 
  CLUSTER_UNAVAILABLE = 4005; 
  PROPOSE_FAILED = 4006;

  // ======================
  // Unclassified error
  // ======================
  GENERAL = 8888;
  UNCATEGORIZED = 9999; 
}

message ErrorMetadata {
  // Errors suitable for retry
  optional uint64 retry_after_ms = 1;
  
  // Leader change information
  optional string leader_id = 2;
  optional string leader_address = 3;
  
  // Error details (for debugging only)
  optional string debug_message = 15;
}

message ClientResponse {
  ErrorCode error = 1;

  oneof success_result {
    bool write_ack = 2;
    ReadResults read_data = 3;
  }

  ErrorMetadata metadata = 4;
}

message ReadResults {
  repeated ClientResult results = 1;
}


message MetadataRequest {
}

message NodeMeta {
  uint32 id = 1;
  string ip = 2;
  uint32 port = 3;
  int32 role = 4;
}

message ClusterMembership {
  repeated NodeMeta nodes = 1;
}

message VotedFor {
  uint32 voted_for_id = 1; 
  uint64 voted_for_term = 2;
}

message SnapshotEntry {
  bytes key = 1;
  bytes value = 2;
}

message SnapshotMeta {
    uint64 versionHigh = 1;
    uint64 versionLow = 2;
    uint64 createdAtHigh = 3;
    uint64 createdAtLow = 4;
    uint32 authorId = 5;
    uint64 lastIncludedIndex = 6;
    uint64 lastIncludedTerm = 7;
}

message Snapshot {
  SnapshotMeta meta = 1;
  repeated SnapshotEntry data = 2;  
}

message ClusteMembershipChangeRequest {
  // the request sender id, (might be fake leader or real leader)
  uint32 id = 1;
  // leader term
  uint64 term = 2;
  // so follower can redirect clients
  // when receiver receives the configure, they need compare the version
  // value is timestamp by default.
  uint64 version = 3;

  ClusterMembership cluster_membership = 4;
}

message ClusterConfUpdateResponse {
  // record down the response owner id
  uint32 id = 1;
  uint64 term = 2;
  uint64 version = 3;
  bool success = 4;
}

message SnapshotChunk {
  // Protocol header (repeated in each block)
  fixed64 term = 1; // compact binary encoding
  fixed64 leader_id = 2; // digital node ID

  // Chunk metadata
  fixed32 seq = 3; // Block sequence number starting from 0
  fixed32 total = 4; // Total number of blocks
  bytes checksum = 5; // 4-byte CRC32

  // Metaeata
  SnapshotMetadata metadata = 6;
  
  // Payload data
  bytes data = 7; // 4MB is recommended
}

message SnapshotMetadata {
  uint64 last_included_index = 1; // The last log index included in the snapshot
  uint64 last_included_term = 2;  // The last log term included in the snapshot
  bytes checksum = 3;             // SHA-256 checksum
}
  
message SnapshotResponse {
  uint64 term = 1; // Follower's current term (for Leader degradation detection)
  bool success = 2; // Whether the reception is successful
  uint32 next_chunk = 3; // If failed, specify the chunk index to be retransmitted
}

message PurgeLogRequest {
  uint64 term = 1;
  uint32 leader_id = 2;
  uint64 last_included_index = 3; // Maximum log index that can be deleted
  uint64 last_included_term = 4; // Corresponding log term
  bytes snapshot_checksum = 5;
}
  
message PurgeLogResponse {
  uint64 term = 1;
  bool success = 2;
}

  
service RpcService {
  rpc RequestVote (VoteRequest) returns (VoteResponse){};
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse){};
  rpc UpdateClusterConf (ClusteMembershipChangeRequest) returns (ClusterConfUpdateResponse){};
  rpc HandleClientPropose (ClientProposeRequest) returns (ClientResponse){};
  rpc HandleClientRead (ClientReadRequest) returns (ClientResponse){};
  rpc GetClusterMetadata (MetadataRequest) returns (ClusterMembership){};
  rpc InstallSnapshot(stream SnapshotChunk) returns (SnapshotResponse) {};
  rpc PurgeLog(PurgeLogRequest) returns (PurgeLogResponse);
}
