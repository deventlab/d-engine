syntax = "proto3";
package raft.common;

// Basic definitions shared across modules
message LogId {
  uint64 term = 1;
  uint64 index = 2;
}

// Raft log entry
message Entry {
  uint64 index = 1;
  uint64 term = 2;
  EntryPayload payload = 3; 
}

// Log entry payload
message EntryPayload {
  oneof payload {
    Noop noop = 1;       // No operation (internal to the protocol)
    bytes command = 2;    // Business write operation
    MembershipChange config = 3;  // Cluster configuration change
  }
}

// Internal operation of the protocol
message Noop {} // Empty structure

// Cluster configuration change
message MembershipChange {
  oneof change { 
    AddNode add_node = 1; 
    RemoveNode remove_node = 2; 
    PromoteLearner promote = 3; 
    BatchPromote batch_promote = 4;
  }
}

message AddNode { 
  uint32 node_id = 1; 
  string address = 2; 
}

message RemoveNode { 
  uint32 node_id = 1;
}

message PromoteLearner { 
  uint32 node_id = 1;
  NodeStatus status = 2;
}

message BatchPromote{ 
  repeated uint32 node_ids = 1;
  NodeStatus new_status = 2;
}

enum NodeStatus {
  JOINING = 0;        // New node, catching up with logs
  PENDING_ACTIVE = 1; // Logs have been caught up, waiting for quorum confirmation
  ACTIVE = 2;         // Formal voting member
  DRAINING = 3;       // Prepare to go offline (not accepting new requests)
}

message SnapshotEntry {
    bytes key = 1;
    bytes value = 2;
}
  
message SnapshotMeta {
    uint64 versionHigh = 1;
    uint64 versionLow = 2;
    uint64 createdAtHigh = 3;
    uint64 createdAtLow = 4;
    uint32 authorId = 5;
    LogId lastIncluded = 6;
}

message Snapshot {
    SnapshotMeta meta = 1;
    repeated SnapshotEntry data = 2;  
}
  