//! Extensions for protobuf-generated client types
//!
//! This module provides additional methods for protobuf-generated types
//! that are not automatically generated by the protobuf compiler.

use crate::proto::client::ClientReadRequest;
use crate::proto::client::ReadConsistencyPolicy;

impl ClientReadRequest {
    /// Checks if the consistency_policy field is present in the request
    ///
    /// Returns true if the client explicitly specified a consistency policy,
    /// false if the field is absent (should use server default).
    pub fn has_consistency_policy(&self) -> bool {
        self.consistency_policy.is_some()
    }

    /// Gets the consistency policy value safely
    ///
    /// Returns Some(policy) if present, None if field is absent.
    /// Safer alternative that doesn't panic.
    pub fn get_consistency_policy(&self) -> Option<ReadConsistencyPolicy> {
        self.consistency_policy.and_then(|policy_i32| {
            match policy_i32 {
                x if x == ReadConsistencyPolicy::LeaseRead as i32 => {
                    Some(ReadConsistencyPolicy::LeaseRead)
                }
                x if x == ReadConsistencyPolicy::LinearizableRead as i32 => {
                    Some(ReadConsistencyPolicy::LinearizableRead)
                }
                _ => None, // Invalid value
            }
        })
    }
}
